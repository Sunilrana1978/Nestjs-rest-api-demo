service: nestjs-rest-app-demo

plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-plugin-optimize
provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  region: us-west-2
  apiGateway:
      shouldStartNameWithService: true
  
  environment: 
      DYNAMODB_ENDPOINT: ${self:custom.endpoints.dynamodbURL}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'dynamodb:DescribeTable'
        - 'dynamodb:Query'
        - 'dynamodb:Scan'
        - 'dynamodb:GetItem'
        - 'dynamodb:PutItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
      Resource: "*"

functions:
  main:
    handler: dist/lambda.handler
    environment:
      NODE_ENV: ${opt:stage, 'dev'}
    events:
      - http:
          method: ANY
          path: /
          cors: true
      - http:
          method: ANY
          path: '{proxy+}'
          cors: true

custom:
    tableName: users
    dynamodb:
        stages:
            - dev
            - test
        start:
            port: 8000
            inMemory: true
            migrate: true
    endpoints:
      dynamodbURL: 'http://localhost:8000'
    serverless-offline:
      httpPort: 3003
    optimize:
      external: ['swagger-ui-dist']

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
